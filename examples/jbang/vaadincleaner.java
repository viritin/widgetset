///usr/bin/env jbang "$0" "$@" ; exit $?
//JAVA 17+
//DEPS in.virit.ws:jbang-starter:24.6.2

package bang;

import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.html.Paragraph;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.progressbar.ProgressBar;
import com.vaadin.flow.component.select.Select;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.Route;
import org.apache.commons.io.FileUtils;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.vaadin.firitin.components.RichText;
import org.vaadin.firitin.components.button.DeleteButton;
import org.vaadin.firitin.components.button.UIFuture;
import org.vaadin.firitin.components.notification.VNotification;
import org.vaadin.firitin.components.orderedlayout.VHorizontalLayout;
import org.vaadin.firitin.components.textfield.VTextField;

import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

@SpringBootApplication
public class vaadincleaner {

    public static void main(String... args) {
        SpringApplication.run(vaadincleaner.class, args);
    }

    @Route
    public static class MainView extends VerticalLayout {
        UIFuture uiFuture = new UIFuture();
        final UI ui = UI.getCurrent();

        private Select<Integer> depth = new Select<>() {{
            setItems(1, 2, 3, 4, 5);
            setValue(2);
            setLabel("Level");
        }};
        private ArrayList<Path> pomFiles;

        Grid<Path> vaadinProjects = new Grid<>() {{
            addColumn(p -> p.toString().substring(directory.getValue().length())).setHeader("Project");
            addComponentColumn(p -> {
                var div = new Div(new ProgressBar() {{
                    setIndeterminate(true);
                }});
                uiFuture.supplyAsync(() -> {
                    try {
                        return FileUtils.byteCountToDisplaySize(FileUtils.sizeOfDirectory(p.getParent().toFile()));
                    } catch (Exception e) {
                        return "??";
                    }
                }).thenAccept(size -> {
                    div.removeAll();
                    div.add(size);
                });
                return div;
            }).setHeader("Size");
        }};
        public MainView() {
            add(new H1("Vaadin Cleaner"));
            add(new RichText().withMarkDown("""
                    Tiny tooling that cleans up a ton of disk space by removing autogenerated files (mostly related to
                    the front-end build/bundling) by Vaadin projects. Seeks projects based on pom.xml files and removes 
                    target/node directories with `mvn com.vaadin:vaadin-maven-plugin:dance` & `mvn clean`. Requires
                    Maven and Mac.
                    """));
            add(new VHorizontalLayout()
                    .withExpanded(directory)
                    .withComponents(depth, clean)
                    .withAlignItems(Alignment.BASELINE));
            addAndExpand(vaadinProjects);

        }

        private void seekVaadinProjects(String value) {
            ExecutorService slowTaskService;
            slowTaskService = (ExecutorService) uiFuture.getExecutor();
            // cancel current tasks
            if (slowTaskService != null) {
                slowTaskService.shutdownNow();
            }
            uiFuture.setExecutor(Executors.newSingleThreadExecutor());

            // TODO make this also support Gradle projects
            pomFiles = new ArrayList<>();

            try {
                Files.walkFileTree(Path.of(value), Collections.emptySet(), depth.getValue(), new SimpleFileVisitor<Path>() {
                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                        if (file.getFileName().toString().equals("pom.xml")) {
                            // candidate, but also check if it has a vaadin dependency
                            boolean vaadinProject = Files.readString(file).contains("vaadin");
                            if (vaadinProject) {
                                pomFiles.add(file);
                            }
                        }
                        return super.visitFile(file, attrs);
                    }
                });

                Notification.show("Found " + pomFiles.size() + " potential Vaadin projecs. Calculating size...");
            } catch (IOException e) {
                VNotification.prominent("Error: " + e.getMessage());
            }
            vaadinProjects.setItems(pomFiles);
        }

        private void cleanUp() {
            var dialog = new Dialog() {{
                setHeaderTitle("Cleaning up...");
            }};
            dialog.add(new Paragraph("Cleaning up " + pomFiles.size() + " projects..."));
            dialog.open();
            AtomicInteger count = new AtomicInteger(pomFiles.size());
            pomFiles.forEach(pomFile -> {
                Path projectDir = pomFile.getParent();
                uiFuture.runAsync(() -> {
                    ui.access(() -> dialog.add(new Paragraph("Cleaning up " + pomFile.getParent().getFileName() + "...")));
                    try {
                        new ProcessBuilder().directory(projectDir.toFile()).command("mvn", "com.vaadin:vaadin-maven-plugin:dance").inheritIO().start().waitFor();
                        new ProcessBuilder().directory(projectDir.toFile()).command("mvn", "clean").inheritIO().start().waitFor();
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }).thenRun(() -> {
                    dialog.add(new Paragraph(pomFile.getParent().getFileName() + " done."));
                    int left = count.decrementAndGet();
                    if (left == 0) {
                        uiFuture.supplyAsync(() -> {
                            try {
                                var du = new ProcessBuilder("du", "-k", "-d=1", directory.getValue()).start();
                                String res = new String(du.getInputStream().readAllBytes()).split("\\s+")[0];
                                du.waitFor();
                                var now = Long.parseLong(res) * 1024;
                                return now;
                            } catch (Exception e) {
                                throw new RuntimeException(e);
                            }
                        }).thenAccept(now -> {
                            dialog.close();
                            vaadinProjects.setItems(pomFiles);
                        });

                    }
                });
            });
        }

        private TextField directory = new VTextField("Directory") {{
            addValueChangeListener(e -> seekVaadinProjects(e.getValue()));
            setValue(System.getProperty("user.dir"));
        }};

        Button clean = new DeleteButton(this::cleanUp) {{
            setText("Clean up autogenerated files");
            this.setConfirmationPrompt("Are you sure you want to clean up?");
            this.setConfirmationDescription("This will execute mvn vaadin:dance & mvn clean in all found directories.");
        }};


    }
}